name: Sync GitHub Secrets to Vault (Self-Hosted)

on:
  push:
    paths:
      - preprod
  workflow_dispatch:

jobs:
  sync-secrets:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Sync Secrets with Vault
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }} # Pass only the token explicitly
        run: |
          export VAULT_ADDR="http://127.0.0.1:8200"

          # Check required commands
          command -v jq >/dev/null 2>&1 || { echo "jq is required but not installed. Exiting."; exit 1; }
          command -v vault >/dev/null 2>&1 || { echo "Vault CLI is required but not installed. Exiting."; exit 1; }

          vault status

          # Dynamically process secrets
          for secret_var in $(printenv | awk -F= '/^secrets_/ {print $1}'); do
            echo "Detected secret: $secret_var"
            export ${secret_var}="${!secret_var}"
          done

          # Fetch existing Vault configurations
          existing_configs=$(vault kv list -format=json preprod | jq -r '.[]')

          # Read the preprod file
          desired_configs=()
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ -z "$line" || "$line" == \#* ]] && continue
            IFS='=' read -r config params <<< "$line"

            # Replace placeholders dynamically
            for secret_var in $(printenv | awk -F= '/^secrets_/ {print $1}'); do
              placeholder="{{${secret_var}}}"
              secret_value="${!secret_var}"
              params=$(echo "$params" | sed "s|$placeholder|$secret_value|g")
            done

            desired_configs+=("$config")

            # Add or update configuration in Vault
            echo "Processing $config with parameters: $params"
            vault kv put "preprod/$config" $params || { echo "Failed to update $config in Vault. Skipping."; continue; }
          done < ./preprod

          # Convert desired configs to a space-separated string
          desired_configs_str=$(printf "%s " "${desired_configs[@]}")

          # Remove configurations in Vault that are not in the preprod file
          for existing in $existing_configs; do
            if [[ ! " ${desired_configs_str[@]} " =~ " ${existing} " ]]; then
              echo "Removing $existing from Vault..."
              vault kv delete "preprod/$existing" || { echo "Failed to remove $existing. Skipping."; continue; }
            fi
          done
